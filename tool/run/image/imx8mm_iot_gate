##
# Check if the uImage should be gzipped
#
proc image_uboot_use_no_gzip { } { return [get_cmd_switch --image-uboot-no-gzip] }

##
# Create disk image with a bootable uImage only
#
proc run_image { } {

	set elf_img [file join [run_dir] boot image.elf]
	set sgdisk [installed_command sgdisk]
 
	#
	# Build uImage
	#
	set elf_img [file join [run_dir] boot image.elf]

	# parse ELF entrypoint and load address
	set entrypoint [exec [cross_dev_prefix]readelf -h $elf_img | \
			grep "Entry point address: " | \
			sed -e "s/.*Entry point address: *//"]
	set load_addr [exec [cross_dev_prefix]readelf -l $elf_img | \
		       grep -m 1 "LOAD"]
	set load_addr [lindex [regexp -inline -all -- {\S+} $load_addr] 3]

	set bin_img [file join [run_dir] boot image.bin]
	exec [cross_dev_prefix]objcopy -O binary $elf_img $bin_img

	set use_gzip [expr ![image_uboot_use_no_gzip]]
	set compress_type none
	set bin_ext ""

	# compress ELF
	if $use_gzip {
		exec gzip [image_uboot_gzip_opt] --force $bin_img
		set bin_ext .gz
		set compress_type gzip
	}

	set arch "arm64"

	if {[image_uboot_use_fit]} {
		# create image.itb
		set uboot_img [file join [run_dir] boot image.itb]
		exec mkimage -f auto -A $arch -O linux -T kernel -C $compress_type -a $load_addr \
		             -e $entrypoint -d $bin_img$bin_ext $uboot_img
	} else {
		# create uImage
		set uboot_img [file join [run_dir] boot uImage]
		exec mkimage -A $arch -O linux -T kernel -C $compress_type -a $load_addr \
		             -e $entrypoint -d $bin_img$bin_ext $uboot_img
	}
	exec rm -rf $bin_img$bin_ext $elf_img


	#
	# Create disk image
	#
	set run_size [expr [regsub {\s.*} [exec du -smL [run_dir]/boot] {}]]

	set disk_size [expr $run_size + 1]
	# generate head space designated for the partition table
	exec dd if=/dev/zero of=[run_dir].header count=34 bs=512 2>/dev/null

	exec dd if=/dev/zero of=[run_dir].partition bs=1M count=$disk_size 2>/dev/null
	exec [installed_command mkfs.vfat] -n STAGE0 [run_dir].partition

	# copy content of boot to disk image
	foreach file [exec ls [run_dir]/boot] {
		exec [installed_command mcopy] -i [run_dir].partition -s [run_dir]/boot/$file ::
	}

	exec cat [run_dir].header [run_dir].partition > [run_dir].img

	exec -ignorestderr [installed_command sgdisk] --set-alignment=1 --largest-new=1 --typecode=1:EF00 [run_dir].img

	exec rm -f [run_dir].header [run_dir].partition

	set size_image [expr [regsub {\s.*} [exec du -sk [run_dir].img] {}]]
	puts "Created image file [run_dir].img (${size_image}kiB)"

}

