if { ![have_board imx8mp_iot_gate] } {
	puts "not supported board!"
	exit 0
}


proc current_pkg { pkg } { return $pkg/[_current_depot_archive_version pkg $pkg] }


# Inspired from run_genode_until, waits for a specific output `wait_for_re`
# on a spawn ID. In contrast to run_genode_until it works also with spawning
# pure expect scripts. Further, this method works accross reboots of the device,
# something that run_genode_until aborts.
#
# /param   wait_for_re        The regex pattern to match against
# /param   timeout_value      The timout for above pattern to appear
# /param   running_spawn_id   The spawn id of the data stream
proc run_spawned_until { wait_for_re timeout_value running_spawn_id } {
	global output
	set timeout $timeout_value

	expect {
		-i $running_spawn_id -re $wait_for_re { }
		eof     { puts stderr "Error: Spawned process died unexpectedly"; exit -3 }
		timeout { puts stderr "Error: Test execution timed out while waiting for \"$wait_for_re\""; exit -2 }
	}
	append output $expect_out(buffer)
}


proc get_ip_addr { } {
	global genode_spawn_id
	global output

	run_spawned_until {\[uplink\] dhcp offer from.*\n} 25 $genode_spawn_id

	# search the IP addredd of the interface
	set match_string {([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+), offering ([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+),}
	regexp $match_string $output all ip_server ip_addr

	return $ip_addr
}


create_boot_directory


lappend depot_archives [depot_user]/raw/imx8mp_iot_gate-devices
lappend depot_archives [depot_user]/src/[base_src]
lappend depot_archives [depot_user]/src/depot_deploy
lappend depot_archives [depot_user]/src/depot_query
lappend depot_archives [depot_user]/src/dynamic_rom
lappend depot_archives [depot_user]/src/fs_rom
lappend depot_archives [depot_user]/src/imx8mp_iot_gate-eeprom_reader
lappend depot_archives [depot_user]/src/imx8mp_platform
lappend depot_archives [depot_user]/src/imx8mq_i2c
lappend depot_archives [depot_user]/src/imx_pin
lappend depot_archives [depot_user]/src/init
lappend depot_archives [depot_user]/src/libc
lappend depot_archives [depot_user]/src/nic_router
lappend depot_archives [depot_user]/src/report_rom
lappend depot_archives [depot_user]/src/rom_filter
lappend depot_archives [depot_user]/src/rom_reporter
lappend depot_archives [depot_user]/src/test-log
lappend depot_archives [depot_user]/src/vfs
lappend depot_archives [depot_user]/src/vfs_lwip
lappend depot_archives [depot_user]/src/zlib

import_from_depot $depot_archives


create_tar_from_depot_binaries [run_dir]/genode/depot.tar \
	[depot_user]/pkg/nic_stmmac-imx8mp_iot_gate \
	[depot_user]/pkg/test-log

build {
	server/heartbeat_monitor
}


append config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>

	<default-route>
		<any-service> <parent/> </any-service>
	</default-route>

	<default caps="100"/>

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>

	<start name="platform" caps="150" managing_system="yes">
		<binary name="imx8mp_platform"/>
		<resource name="RAM" quantum="2M"/>
		<provides> <service name="Platform"/> </provides>
		<config verbose="yes">
			<policy label_prefix="init -> nic -> " info="yes"> <device name="eqos"/> </policy>
			<policy label="i2c -> "> <device name="i2c2"/> </policy>
			<policy label="pin -> " info="yes"> <device name="gpio1"/> </policy>
		</config>
		<route>
			<service name="ROM" label="system"> <child name="report_rom"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="pin" caps="150">
		<binary name="imx_pio"/>
		<resource name="RAM" quantum="2M"/>
		<provides>
			<service name="IRQ"/>
			<service name="Pin_control"/>
			<service name="Pin_state"/>
		</provides>
		<config>
			<!-- deassert reset signal of STMMAC NICs Phy -->
			<out name="STMMAC_PHY_nRST" bank="0" index="10" default="on"/>
		</config>
		<route>
			<service name="Platform"> <child name="platform"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="report_rom">
		<resource name="RAM" quantum="2M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="no">
			<policy label="init -> nic -> mac"      report="eeprom -> eeprom_entry_1"/>
			<policy label="rom_filter -> nic_state" report="nic_router -> state"/>
			<policy label="platform -> system"      report="rom_reporter -> system"/>
		</config>
	</start>

	<start name="i2c" caps="150">
		<binary name="imx8q_evk_i2c"/>
		<resource name="RAM" quantum="2M"/>
		<provides> <service name="I2c"/> </provides>
		<config verbose="yes">
			 <policy label_prefix="eeprom" bus_address="0x50"/>
		</config>
		<route>
			<service name="Platform"> <child name="platform"/> </service>
			<service name="Timer"> <child name="timer"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="eeprom">
		<binary name="imx8mp_iot_gate_eeprom_reader"/>
		<resource name="RAM" quantum="10M"/>
		<route>
			<service name="I2c"> <child name="i2c"/> </service>
			<service name="Report"> <child name="report_rom"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="nic_router" caps="200">
		<resource name="RAM" quantum="10M"/>
		<provides>
			<service name="Nic"/>
			<service name="Uplink"/>
		</provides>
		<config verbose_domain_state="yes">

			<report bytes="no"
			        stats="no"
			        dropped_fragm_ipv4="no"
			        quota="no"
			        config="yes"
			        config_triggers="no"
			        link_state="yes"
			        link_state_triggers="no"
			        interval_sec="5"/>

			<domain name="uplink">
				<nat domain="downlink" tcp-ports="16384"/>
				<tcp-forward port="443" domain="downlink" to="10.0.3.2"/>
				<tcp-forward port="80"  domain="downlink" to="10.0.3.2"/>
			</domain>

			<domain name="downlink" interface="10.0.3.1/24">
				<dhcp-server ip_first="10.0.3.2" ip_last="10.0.3.2"/>
			</domain>

			<policy label_prefix="init -> nic"  domain="uplink"/>

		</config>
		<route>
			<service name="Report"> <child name="report_rom"/> </service>
			<service name="Timer"> <child name="timer"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="init" caps="1600">
		<resource name="RAM" quantum="600M"/>
		<route>
			<service name="Platform"> <child name="platform"/> </service>
			<service name="ROM" label="config"> <child name="deploy_report_rom"/> </service>
			<service name="ROM" label="nic -> mac"> <child name="report_rom"/> </service>
			<service name="Report" label_last="state"> <child name="heartbeat_monitor"/> </service>
			<service name="Timer"> <child name="timer"/> </service>
			<service name="Uplink"> <child name="nic_router"/> </service>
			<service name="ROM" label_prefix="} [depot_user] {"> <child name="fs_rom"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="deploy_report_rom" caps="100">
		<binary name="report_rom"/>
		<resource name="RAM" quantum="2M"/>
		<provides>
			<service name="Report"/>
			<service name="ROM"/>
		</provides>
		<config verbose="no">
			<policy label="depot_deploy -> blueprint"        report="depot_query -> blueprint"/>
			<policy label="depot_query -> query"             report="depot_deploy -> query"/>
			<policy label="heartbeat_monitor -> init.config" report="depot_deploy -> init.config"/>
			<policy label="init -> config"                   report="heartbeat_monitor -> init.config"/>
		</config>
	</start>

	<start name="depot_deploy" caps="100">
		<resource name="RAM" quantum="40M"/>
		<route>
			<service name="ROM"    label="blueprint">   <child name="deploy_report_rom"/> </service>
			<service name="ROM"    label="config">      <parent label="deploy"/> </service>
			<service name="Report" label="init.config"> <child name="deploy_report_rom"/> </service>
			<service name="Report" label="query">       <child name="deploy_report_rom"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="vfs" caps="200">
		<resource name="RAM" quantum="40M"/>
		<provides>
			<service name="File_system"/>
		</provides>
		<config>
			<vfs>
				<dir name="depot">
					<tar name="depot.tar"/>
				</dir>
			</vfs>
			<default-policy root="depot"/>
		</config>
	</start>

	<start name="fs_rom" caps="200">
		<resource name="RAM" quantum="40M"/>
		<provides>
			<service name="ROM"/>
		</provides>
		<config>
			<vfs>
				<dir name="depot">
					<fs/>
				</dir>
			</vfs>
			<default-policy root="depot"/>
		</config>
		<route>
			<service name="File_system"> <child name="vfs"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="depot_query" caps="100">
		<resource name="RAM" quantum="4M"/>
		<config query="rom">
			<vfs>
				<dir name="depot">
					<fs/>
				</dir>
			</vfs>
		</config>
		<route>
			<service name="File_system">              <child name="vfs"/> </service>
			<service name="ROM"    label="query">     <child name="deploy_report_rom"/> </service>
			<service name="Report" label="blueprint"> <child name="deploy_report_rom"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="heartbeat_monitor" caps="100">
		<resource name="RAM" quantum="16M"/>
		<config/>
		<provides>
			<service name="Report"/>
		</provides>
		<route>
			<service name="ROM"    label="init.config">  <child name="deploy_report_rom"/> </service>
			<service name="Report">                      <child name="deploy_report_rom"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="rom_filter" caps="100">
		<resource name="RAM" quantum="16M"/>
		<provides>
			<service name="ROM"/>
		</provides>
		<config verbose="no">
			<input name="uplink_state" rom="nic_state" node="state" default="">
				<node type="domain" attribute="name" value="uplink">
					<node type="interface">
						<attribute name="link_state"/>
					</node>
				</node>
			</input>
			<output node="system">
				<if>
					<has_value input="uplink_state" value="true"/>
					<then>
						<attribute name="state" value="reset"/>
					</then>
					<else>
						<attribute name="state" value=""/>
					</else>
				</if>
			</output>
		</config>
		<route>
			<service name="ROM" label="nic_state"> <child name="report_rom"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="rom_reporter" caps="100">
		<resource name="RAM" quantum="16M"/>
		<config>
			<rom label="system"/>
		</config>
		<route>
			<service name="ROM" label="system"> <child name="rom_filter"/> </service>
			<service name="Report"> <child name="report_rom"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

</config>}

install_config $config

exec -ignorestderr dd if=/dev/urandom of=[run_dir]/genode/data bs=1M count=16

append deploy_data {	<config arch="arm_v8a">
		<static>
			<parent-provides>
				<service name="CPU"/>
				<service name="IO_MEM"/>
				<service name="IO_PORT"/>
				<service name="LOG"/>
				<service name="PD"/>
				<service name="Platform"/>
				<service name="RM"/>
				<service name="ROM"/>
				<service name="Report"/>
				<service name="Timer"/>
				<service name="Uplink"/>
			</parent-provides>

			<resource name="RAM" preserve="4M"/>
			<resource name="CAP" preserve="50"/>
		</static>

		<common_routes>
			<service name="CPU"> <parent/> </service>
			<service name="LOG"> <parent/> </service>
			<service name="PD"> <parent/> </service>
			<service name="ROM" label_last="init" label="init"> <parent/> </service>
			<service name="ROM" label_last="ld.lib.so" label="ld.lib.so"> <parent/> </service>
			<service name="ROM" label_last="mac" label="nic -> mac"> <parent/> </service>
			<service name="Report"> <parent/> </service>
			<service name="Timer"> <parent/> </service>
			<service name="Platform"> <parent/> </service>
			<service name="Uplink"> <parent/> </service>
		</common_routes>

		<report delay_ms="5000" ids="yes" child_ram="yes" child_caps="yes" init_ram="yes" init_caps="yes"/>

		<heartbeat rate_ms="2000"/>

		<monitor_cpu_faults/>
		<monitor_pd_faults/>

		<start name="test-log" pkg="} [depot_user] {/pkg/} [current_pkg test-log] {">
			<heartbeat/>
			<route>
				<any-service> <parent/> </any-service>
			</route>
		</start>

		<start name="nic" pkg="} [depot_user] {/pkg/} [current_pkg nic_stmmac-imx8mp_iot_gate] {">
			<heartbeat/>
		</start>
	</config>}

set fd [open bin/deploy w]
puts $fd $deploy_data
close $fd

build_boot_image [list {*}[build_artifacts] deploy]

run_genode_until {New PLL1416=system_pll3_clk Ref_clk=0 bypass=0 reset=1 Gating_enable=1 Lock_signal=1} 15
set genode_spawn_id [output_spawn_id]

run_spawned_until {Kernel:.*\n.*Kernel.*\n} 36000 $output_spawn_id
